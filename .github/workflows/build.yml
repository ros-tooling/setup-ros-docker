name: "Build Docker image"
on:
  pull_request:
  push:
    branches:
      - master
  schedule:
    # Run the CI automatically every hour to look for flakyness.
    - cron:  '0 * * * *'

jobs:
  build_ubuntu_docker_image:
    strategy:
      fail-fast: false
      matrix:
          base_image_name: [ubuntu]
          base_image_tag: [bionic, focal, xenial]
    name: "${{ matrix.base_image_name }}-${{ matrix.base_image_tag }}"
    # always use latest linux worker, as it should not have any impact
    # when it comes to building docker images.
    runs-on: ubuntu-latest
    steps:
    - name: checkout repository
      uses: actions/checkout@v2
    - name: publish image
      uses: matootie/github-docker@v2.2.2
      with:
        accessToken: ${{ secrets.github_token }}
        buildArg: |
            BASE_IMAGE_NAME=${{ matrix.base_image_name }}
            BASE_IMAGE_TAG=${{ matrix.base_image_tag }}
            VCS_REF=${{ github.sha }}
        imageName: "setup-ros-docker-${{ matrix.base_image_name }}-${{ matrix.base_image_tag }}"
    # Publish the image to DockerHub too
    - run: docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
    - run: docker images
    - run: "docker tag docker.pkg.github.com/ros-tooling/setup-ros-docker/setup-ros-docker-${{ matrix.base_image_name }}-${{ matrix.base_image_tag }}:master rostooling/setup-ros-docker:${{ matrix.base_image_name }}-${{ matrix.base_image_tag }}-latest"
      if: github.event_name != 'pull_request'
    - run: "docker push rostooling/setup-ros-docker:${{ matrix.base_image_name }}-${{ matrix.base_image_tag }}-latest"
      if: github.event_name != 'pull_request'

  build_ubuntu_docker_image_ros:
    strategy:
      fail-fast: false
      matrix:
          base_image_name: [ubuntu]
          extra_apt_packages:
              - ros-dashing-desktop
              - ros-dashing-ros-base
              - ros-eloquent-desktop
              - ros-eloquent-ros-base
              # - ros-foxy-desktop
              # - ros-foxy-ros-base
              - ros-kinetic-desktop
              - ros-kinetic-ros-base
              - ros-melodic-desktop
              - ros-melodic-ros-base
          include:
          # Kinetic Kame (May 2016 - May 2021)
          - extra_apt_packages: ros-kinetic-desktop
            base_image_tag: xenial
          - extra_apt_packages: ros-kinetic-ros-base
            base_image_tag: xenial

          # Melodic Morenia (May 2018 - May 2023)
          - extra_apt_packages: ros-melodic-desktop
            base_image_tag: bionic
          - extra_apt_packages: ros-melodic-ros-base
            base_image_tag: bionic

          # Dashing Diademata (May 2019 - May 2021)
          - extra_apt_packages: ros-dashing-desktop
            base_image_tag: bionic
          - extra_apt_packages: ros-dashing-ros-base
            base_image_tag: bionic

          # Eloquent Elusor (November 2019 - November 2020)
          - extra_apt_packages: ros-eloquent-desktop
            base_image_tag: bionic
          - extra_apt_packages: ros-eloquent-ros-base
            base_image_tag: bionic

          # Foxy Fitzroy (May 2020 - May 2023+)
          # - extra_apt_packages: ros-foxy-desktop
          #   base_image_tag: focal
          # - extra_apt_packages: ros-foxy-ros-base
          #   base_image_tag: focal

    name: "${{ matrix.base_image_name }}-${{ matrix.base_image_tag }}-${{ matrix.extra_apt_packages }}"
    # always use latest linux worker, as it should not have any impact
    # when it comes to building docker images.
    runs-on: ubuntu-latest
    steps:
    - name: checkout repository
      uses: actions/checkout@v2
    - name: publish image
      uses: matootie/github-docker@v2.2.2
      with:
        accessToken: ${{ secrets.github_token }}
        buildArg: |
            BASE_IMAGE_NAME=${{ matrix.base_image_name }}
            BASE_IMAGE_TAG=${{ matrix.base_image_tag }}
            EXTRA_APT_PACKAGES=${{ matrix.extra_apt_packages }}
            VCS_REF=${{ github.sha }}
        imageName: "setup-ros-docker-${{ matrix.base_image_name }}-${{ matrix.base_image_tag }}-${{ matrix.extra_apt_packages }}"
    # Publish the image to DockerHub too
    - run: docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
    - run: docker images
    - run: "docker tag docker.pkg.github.com/ros-tooling/setup-ros-docker/setup-ros-docker-${{ matrix.base_image_name }}-${{ matrix.base_image_tag }}-${{ matrix.extra_apt_packages }}:master rostooling/setup-ros-docker:${{ matrix.base_image_name }}-${{ matrix.base_image_tag }}-${{ matrix.extra_apt_packages }}-latest"
      if: github.event_name != 'pull_request'
    - run: "docker push rostooling/setup-ros-docker:${{ matrix.base_image_name }}-${{ matrix.base_image_tag }}-${{ matrix.extra_apt_packages}}-latest"
      if: github.event_name != 'pull_request'

  log_workflow_status_to_cloudwatch:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:bionic
    needs:
    - build_ubuntu_docker_image
    - build_ubuntu_docker_image_ros
    if: always()  # run even if the dependent jobs have failed to log failures
    # Allow build reports to fail on pull requests.
    # When a contribution is made on a fork, the secrets will not be available,
    # and this step will be failing. This is acceptable.
    # On the other end, we want to be notified if this happens on merge, or
    # on schedule.
    continue-on-error: ${{ github.event_name == 'pull_request'}}
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - uses: ros-tooling/action-cloudwatch-metrics@0.0.4
      with:
        # Checks if any of the jobs have failed.
        #
        # needs.*.result is returns the list of all success statuses as an
        # array, i.e. ['success', 'failure, 'success']
        # join() converts the array to a string 'successfailuresuccess'
        # contains() checks whether the string contains failure
        metric-value: ${{ ! contains(join(needs.*.result, ''), 'failure') && ! contains(join(needs.*.result, ''), 'cancelled') }}
